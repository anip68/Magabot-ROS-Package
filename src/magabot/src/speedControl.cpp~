#include<math.h>

#include <ros/ros.h>
#include "magabot/motorClick.h"
#include "magabot/motorSpeed.h"
#include <nav_msgs/Odometry.h>
#include <tf/transform_broadcaster.h>
#include <geometry_msgs/Twist.h>

#define nodeName  "speedControl" // nome do n√≥
#define subName1  "vel" // nome do topico onde recebe ticks do arduino
#define subName2  "xboxjoy" // alterar para "cmd_vel" quando se ligar ao stack navegation
#define PubName1  "odom" // nome do topico onde publica a odometria
#define PubName2  "speed" // nome do topico onde publica a velocidade dos dois motores do magabot em ticks/3,32ms

#define odomFrame_id "odom"
#define odomChildFrame_id "base_link"
//#define odomTfHeaderFrame_id "odom"

#define PI 3.14159

#define Dist 0.355 //diametro do robo ou seja distancia entre as rodas
#define R 0.0926/2 //diametro da roda em metros 0,0926 m
#define Rev 3900  //numero total de ticks dos encoders numa volta da roda

#define cte_th 2*PI*(R/(Dist*Rev))
#define cte_xy R*(PI/Rev)
#define cte_motor (1/(2*PI*R))*Rev*0.00332 // para converter m/s para ticks/3,32ms

class Listener{
	private:
		//**********************
		
		int leftMotor;
		int rightMotor;
		
		int leftMotorTicks;		
		int rightMotorTicks;		
		
		//velocidades para controlar o robo
		double vx;
		double vy;
		double wz;	
		
		//velocidades medidas pelos encoders do robo
		double velo_x;
		double velo_y;
		double velo_th;
		
		//distancia total percorrida pelo robo
		double x;
		double y;
		double th;
		
		ros::Time scan_time;		
		ros::Time newTime, holdTime;
		
		nav_msgs::Odometry odom;
		magabot::motorSpeed speed;		
		
		//since all odometry is 6DOF we'll need a quaternion created from yaw
    	geometry_msgs::Quaternion odom_quat;
		//tf::TransformBroadcaster odom_broadcaster;
		//**********************

		ros::Subscriber sub1;
  		ros::Publisher pub1;
		ros::Subscriber sub2;
  		ros::Publisher pub2;

		void publishMessage();
		void callback1(const magabot::motorClick::ConstPtr& msg);
		void callback2(const geometry_msgs::Twist::ConstPtr& msg);

	public:
		Listener();
		~Listener();		
		
		void init(int argc, char **argv);	
  		void run();
};
Listener::Listener(){
	leftMotor = 0;
	rightMotor = 0;
	
	leftMotorTicks = 0;		
	rightMotorTicks = 0;		
	
	//velocidades para controlar o robo
	vx = 0.0;
	vy = 0.0;
	wz = 0.0;	
	
	//velocidades medidas pelos encoders do robo
	velo_x = 0.0;
	velo_y = 0.0;
	velo_th = 0.0;
	
	//distancia total percorrida pelo robo
	x = 0.0;
	y = 0.0;
	th = 0.0;
}
Listener::~Listener(){
	
}
void Listener::init(int argc, char **argv){	
	ros::init(argc, argv, nodeName);
	ros::NodeHandle n;
		
	scan_time = ros::Time::now();	
	newTime = ros::Time::now();	
	holdTime = ros::Time::now();

	sub1 = n.subscribe(subName1, 1000, &Listener::callback1, this);
	pub1 = n.advertise<nav_msgs::Odometry>(PubName1, 100);
  	
	sub2 = n.subscribe(subName2, 1000, &Listener::callback2, this);
	pub2 = n.advertise<magabot::motorSpeed>(PubName2, 10);

}
void Listener::callback1(const magabot::motorClick::ConstPtr& msg){
	
	//**********************	
	holdTime = newTime;
	rightMotorTicks = msg->motorRight;
	leftMotorTicks = msg->motorLeft;
	newTime = msg->currentTime;
	
	
	double dt = 0.1;//(newTime - holdTime).toSec();
				
	double delta_th = cte_th*double(rightMotorTicks-leftMotorTicks);
	double delta_x = cte_xy*double(rightMotorTicks+leftMotorTicks)*cos(th);
	double delta_y = cte_xy*double(rightMotorTicks+leftMotorTicks)*sin(th);
	
	x += delta_x;
	y += delta_y;
	th += delta_th;		

	velo_x = double(delta_x/dt);
	velo_y = double(delta_y/dt);
	velo_th = double(delta_th/dt);
	odom_quat = tf::createQuaternionMsgFromYaw(th);
	//**********************
	
}
void Listener::callback2(const geometry_msgs::Twist::ConstPtr& msg){
	
    	//**********************	
	vx = msg->linear.x;
	vy = msg->linear.y;
	wz = msg->angular.z;
		
	leftMotor = (int)((vx-(wz*(Dist/2)))*cte_motor); // ticks/3,32ms
	rightMotor = (int)((vx+(wz*(Dist/2)))*cte_motor); // ticks/3,32ms
		
	//**********************
	
}
void Listener::publishMessage(){  
	
	//**********************	
	
	speed.motorRight = leftMotor; 
	speed.motorLeft = rightMotor; 
	
	scan_time = ros::Time::now();
	odom.header.stamp = scan_time;
    odom.header.frame_id = odomFrame_id;

    //set the position
    odom.pose.pose.position.x = x;
 	odom.pose.pose.position.y = y;
 	odom.pose.pose.position.z = 0.0;
 	odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = odomChildFrame_id;
    odom.twist.twist.linear.x = velo_x;
    odom.twist.twist.linear.y = velo_y;
    odom.twist.twist.angular.z = velo_th;

	//set the covariance
	odom.pose.covariance[0]  = 0.001;
	odom.pose.covariance[7]  = 0.001;
	odom.pose.covariance[14] = 0.001;
	odom.pose.covariance[21] = 1000;
	odom.pose.covariance[28] = 1000;
	odom.pose.covariance[35] = 1000;

	odom.twist.covariance = odom.pose.covariance;

		
	//**********************
	
    pub1.publish(odom);
	pub2.publish(speed);
}
void Listener::run(){
	ros::Rate loop_rate(500);
  	while (ros::ok()){    
    		ros::spinOnce();
		
		//**********************
		


		//**********************

		publishMessage();
    	loop_rate.sleep();
  	}
}
//##########################################################
int main(int argc, char **argv)
{
	Listener listener;

	listener.init(argc, argv);

    listener.run();

	return 0;
}
