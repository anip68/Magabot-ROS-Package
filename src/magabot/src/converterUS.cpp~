#include "ros/ros.h"
#include "magabot/IRsensor.h"
#include <sensor_msgs/LaserScan.h>

#define numReadings  171 // 170 + 1
#define nodeName  "converterUS"
#define subName  "rangeSom"
#define subPubName  "/scanUS"

#define frameId  "/laser_frameUS"
#define angleMin  0 // graus
#define angleMax  180 // graus
#define timeIncrement  0.15 // segundos
#define rangeMin  0.0 // metros
#define rangeMax  1.0 // metros 

class Listener{
	private:
		int num_leitura;
		float distancia;		
		bool endSweep;
		float *dadosD;
		
		//ros::NodeHandle n;

		ros::Subscriber sub;
  		ros::Publisher scan_pub;

		sensor_msgs::LaserScan scan;
		
		
  		void addValue();

		void publishMessage();
		
	public:
		Listener();
		~Listener();
		
		void init(int argc, char **argv);
  		void callback(const magabot::IRsensor::ConstPtr& msg);		
  		void run();
};
Listener::Listener(){
	dadosD = (float*)malloc(numReadings*sizeof(float));
}
Listener::~Listener(){
	free(dadosD);
}
void Listener::init(int argc, char **argv){	
	ros::init(argc, argv, nodeName);
	ros::NodeHandle n;

	sub = n.subscribe(subName, 1000, &Listener::callback, this);
  	scan_pub = n.advertise<sensor_msgs::LaserScan>(subPubName, 50);

	scan.header.frame_id = frameId;
    	scan.angle_min = angleMin * (3.14/180);
    	scan.angle_max = angleMax * (3.14/180);
    	scan.angle_increment = ((angleMax - angleMin)*(3.14/180)) / (numReadings-1);
    	scan.time_increment = timeIncrement;
   	scan.range_min = rangeMin;
    	scan.range_max = rangeMax;
}
void Listener::callback(const magabot::IRsensor::ConstPtr& msg){
	num_leitura =msg->numLeitura;
  	distancia=(msg->distancia)/100;
  	addValue();	
}
void Listener::addValue(){ 
  	dadosD[num_leitura] = distancia;
  	if (num_leitura = numReadings){
  		endSweep = true;
  	}else{
    		endSweep = false;
  	}
}
void Listener::publishMessage(){  
	ros::Time scan_time = ros::Time::now();

    	//populate the LaserScan message  
    	scan.header.stamp = scan_time;
    	
    	scan.ranges.resize(numReadings);
    	scan.intensities.resize(numReadings);
    	for(unsigned int i = 0; i < numReadings; ++i){
      		scan.ranges[i] = dadosD[i];
      		scan.intensities[i] = 0;
    	}
    	scan_pub.publish(scan);
}
void Listener::run(){
	ros::Rate loop_rate(100);
  	while (ros::ok()){    
    		ros::spinOnce();

		if(endSweep = true){
   			publishMessage();
		}

    		loop_rate.sleep();
  	}
}
//##########################################################
int main(int argc, char **argv)
{
	Listener listener;

	listener.init(argc, argv);

    	listener.run();

	return 0;
}
